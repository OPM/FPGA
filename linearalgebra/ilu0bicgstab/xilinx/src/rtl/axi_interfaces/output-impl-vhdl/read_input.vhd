-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity read_input is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_in_V_AWVALID : OUT STD_LOGIC;
    m_axi_in_V_AWREADY : IN STD_LOGIC;
    m_axi_in_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_in_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_in_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_V_WVALID : OUT STD_LOGIC;
    m_axi_in_V_WREADY : IN STD_LOGIC;
    m_axi_in_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_in_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_in_V_WLAST : OUT STD_LOGIC;
    m_axi_in_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_V_ARVALID : OUT STD_LOGIC;
    m_axi_in_V_ARREADY : IN STD_LOGIC;
    m_axi_in_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_in_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_in_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_V_RVALID : IN STD_LOGIC;
    m_axi_in_V_RREADY : OUT STD_LOGIC;
    m_axi_in_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_in_V_RLAST : IN STD_LOGIC;
    m_axi_in_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_V_BVALID : IN STD_LOGIC;
    m_axi_in_V_BREADY : OUT STD_LOGIC;
    m_axi_in_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_V_offset : IN STD_LOGIC_VECTOR (57 downto 0);
    address : IN STD_LOGIC_VECTOR (63 downto 0);
    data_len : IN STD_LOGIC_VECTOR (31 downto 0);
    elemStream_V_V_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    elemStream_V_V_full_n : IN STD_LOGIC;
    elemStream_V_V_write : OUT STD_LOGIC );
end;


architecture behav of read_input is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln34_fu_119_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln34_reg_206 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln37_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_211 : STD_LOGIC_VECTOR (0 downto 0);
    signal rounds_2_fu_181_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal rounds_2_reg_216 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln40_fu_157_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln40_reg_221 : STD_LOGIC_VECTOR (24 downto 0);
    signal j_fu_151_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal j_reg_229 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal select_ln37_fu_188_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln37_reg_234 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln38_fu_131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_in_loop_fu_96_m_axi_in_V_AWVALID : STD_LOGIC;
    signal grp_dataflow_in_loop_fu_96_m_axi_in_V_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dataflow_in_loop_fu_96_m_axi_in_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_in_loop_fu_96_m_axi_in_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_in_loop_fu_96_m_axi_in_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_in_loop_fu_96_m_axi_in_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_in_loop_fu_96_m_axi_in_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_in_loop_fu_96_m_axi_in_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_in_loop_fu_96_m_axi_in_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_in_loop_fu_96_m_axi_in_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_in_loop_fu_96_m_axi_in_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_in_loop_fu_96_m_axi_in_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_in_loop_fu_96_m_axi_in_V_WVALID : STD_LOGIC;
    signal grp_dataflow_in_loop_fu_96_m_axi_in_V_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_dataflow_in_loop_fu_96_m_axi_in_V_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dataflow_in_loop_fu_96_m_axi_in_V_WLAST : STD_LOGIC;
    signal grp_dataflow_in_loop_fu_96_m_axi_in_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_in_loop_fu_96_m_axi_in_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_in_loop_fu_96_m_axi_in_V_ARVALID : STD_LOGIC;
    signal grp_dataflow_in_loop_fu_96_m_axi_in_V_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dataflow_in_loop_fu_96_m_axi_in_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_in_loop_fu_96_m_axi_in_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_in_loop_fu_96_m_axi_in_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_in_loop_fu_96_m_axi_in_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_in_loop_fu_96_m_axi_in_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_in_loop_fu_96_m_axi_in_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_in_loop_fu_96_m_axi_in_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_in_loop_fu_96_m_axi_in_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_in_loop_fu_96_m_axi_in_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_in_loop_fu_96_m_axi_in_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_in_loop_fu_96_m_axi_in_V_RREADY : STD_LOGIC;
    signal grp_dataflow_in_loop_fu_96_m_axi_in_V_BREADY : STD_LOGIC;
    signal grp_dataflow_in_loop_fu_96_elemStream_V_V_din : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_dataflow_in_loop_fu_96_elemStream_V_V_write : STD_LOGIC;
    signal grp_dataflow_in_loop_fu_96_ap_start : STD_LOGIC;
    signal grp_dataflow_in_loop_fu_96_ap_done : STD_LOGIC;
    signal grp_dataflow_in_loop_fu_96_ap_ready : STD_LOGIC;
    signal grp_dataflow_in_loop_fu_96_ap_idle : STD_LOGIC;
    signal grp_dataflow_in_loop_fu_96_ap_continue : STD_LOGIC;
    signal j_0_reg_84 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_sync_grp_dataflow_in_loop_fu_96_ap_ready : STD_LOGIC;
    signal ap_sync_grp_dataflow_in_loop_fu_96_ap_done : STD_LOGIC;
    signal ap_block_state3_on_subcall_done : BOOLEAN;
    signal grp_dataflow_in_loop_fu_96_ap_start_reg : STD_LOGIC := '0';
    signal ap_sync_reg_grp_dataflow_in_loop_fu_96_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_dataflow_in_loop_fu_96_ap_done : STD_LOGIC := '0';
    signal elem_fu_123_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_109_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln33_fu_127_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln40_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln40_fu_170_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln38_fu_161_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal rounds_fu_137_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln40_fu_143_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component dataflow_in_loop IS
    port (
        elem_0 : IN STD_LOGIC_VECTOR (9 downto 0);
        j_0 : IN STD_LOGIC_VECTOR (23 downto 0);
        address : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_in_V_AWVALID : OUT STD_LOGIC;
        m_axi_in_V_AWREADY : IN STD_LOGIC;
        m_axi_in_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_in_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_WVALID : OUT STD_LOGIC;
        m_axi_in_V_WREADY : IN STD_LOGIC;
        m_axi_in_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_in_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_in_V_WLAST : OUT STD_LOGIC;
        m_axi_in_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_ARVALID : OUT STD_LOGIC;
        m_axi_in_V_ARREADY : IN STD_LOGIC;
        m_axi_in_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_in_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_RVALID : IN STD_LOGIC;
        m_axi_in_V_RREADY : OUT STD_LOGIC;
        m_axi_in_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_in_V_RLAST : IN STD_LOGIC;
        m_axi_in_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_V_BVALID : IN STD_LOGIC;
        m_axi_in_V_BREADY : OUT STD_LOGIC;
        m_axi_in_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        in_V_offset : IN STD_LOGIC_VECTOR (57 downto 0);
        elemStream_V_V_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        elemStream_V_V_full_n : IN STD_LOGIC;
        elemStream_V_V_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        elem_0_ap_vld : IN STD_LOGIC;
        j_0_ap_vld : IN STD_LOGIC;
        address_ap_vld : IN STD_LOGIC;
        in_V_offset_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    grp_dataflow_in_loop_fu_96 : component dataflow_in_loop
    port map (
        elem_0 => select_ln37_reg_234,
        j_0 => j_0_reg_84,
        address => address,
        m_axi_in_V_AWVALID => grp_dataflow_in_loop_fu_96_m_axi_in_V_AWVALID,
        m_axi_in_V_AWREADY => ap_const_logic_0,
        m_axi_in_V_AWADDR => grp_dataflow_in_loop_fu_96_m_axi_in_V_AWADDR,
        m_axi_in_V_AWID => grp_dataflow_in_loop_fu_96_m_axi_in_V_AWID,
        m_axi_in_V_AWLEN => grp_dataflow_in_loop_fu_96_m_axi_in_V_AWLEN,
        m_axi_in_V_AWSIZE => grp_dataflow_in_loop_fu_96_m_axi_in_V_AWSIZE,
        m_axi_in_V_AWBURST => grp_dataflow_in_loop_fu_96_m_axi_in_V_AWBURST,
        m_axi_in_V_AWLOCK => grp_dataflow_in_loop_fu_96_m_axi_in_V_AWLOCK,
        m_axi_in_V_AWCACHE => grp_dataflow_in_loop_fu_96_m_axi_in_V_AWCACHE,
        m_axi_in_V_AWPROT => grp_dataflow_in_loop_fu_96_m_axi_in_V_AWPROT,
        m_axi_in_V_AWQOS => grp_dataflow_in_loop_fu_96_m_axi_in_V_AWQOS,
        m_axi_in_V_AWREGION => grp_dataflow_in_loop_fu_96_m_axi_in_V_AWREGION,
        m_axi_in_V_AWUSER => grp_dataflow_in_loop_fu_96_m_axi_in_V_AWUSER,
        m_axi_in_V_WVALID => grp_dataflow_in_loop_fu_96_m_axi_in_V_WVALID,
        m_axi_in_V_WREADY => ap_const_logic_0,
        m_axi_in_V_WDATA => grp_dataflow_in_loop_fu_96_m_axi_in_V_WDATA,
        m_axi_in_V_WSTRB => grp_dataflow_in_loop_fu_96_m_axi_in_V_WSTRB,
        m_axi_in_V_WLAST => grp_dataflow_in_loop_fu_96_m_axi_in_V_WLAST,
        m_axi_in_V_WID => grp_dataflow_in_loop_fu_96_m_axi_in_V_WID,
        m_axi_in_V_WUSER => grp_dataflow_in_loop_fu_96_m_axi_in_V_WUSER,
        m_axi_in_V_ARVALID => grp_dataflow_in_loop_fu_96_m_axi_in_V_ARVALID,
        m_axi_in_V_ARREADY => m_axi_in_V_ARREADY,
        m_axi_in_V_ARADDR => grp_dataflow_in_loop_fu_96_m_axi_in_V_ARADDR,
        m_axi_in_V_ARID => grp_dataflow_in_loop_fu_96_m_axi_in_V_ARID,
        m_axi_in_V_ARLEN => grp_dataflow_in_loop_fu_96_m_axi_in_V_ARLEN,
        m_axi_in_V_ARSIZE => grp_dataflow_in_loop_fu_96_m_axi_in_V_ARSIZE,
        m_axi_in_V_ARBURST => grp_dataflow_in_loop_fu_96_m_axi_in_V_ARBURST,
        m_axi_in_V_ARLOCK => grp_dataflow_in_loop_fu_96_m_axi_in_V_ARLOCK,
        m_axi_in_V_ARCACHE => grp_dataflow_in_loop_fu_96_m_axi_in_V_ARCACHE,
        m_axi_in_V_ARPROT => grp_dataflow_in_loop_fu_96_m_axi_in_V_ARPROT,
        m_axi_in_V_ARQOS => grp_dataflow_in_loop_fu_96_m_axi_in_V_ARQOS,
        m_axi_in_V_ARREGION => grp_dataflow_in_loop_fu_96_m_axi_in_V_ARREGION,
        m_axi_in_V_ARUSER => grp_dataflow_in_loop_fu_96_m_axi_in_V_ARUSER,
        m_axi_in_V_RVALID => m_axi_in_V_RVALID,
        m_axi_in_V_RREADY => grp_dataflow_in_loop_fu_96_m_axi_in_V_RREADY,
        m_axi_in_V_RDATA => m_axi_in_V_RDATA,
        m_axi_in_V_RLAST => m_axi_in_V_RLAST,
        m_axi_in_V_RID => m_axi_in_V_RID,
        m_axi_in_V_RUSER => m_axi_in_V_RUSER,
        m_axi_in_V_RRESP => m_axi_in_V_RRESP,
        m_axi_in_V_BVALID => ap_const_logic_0,
        m_axi_in_V_BREADY => grp_dataflow_in_loop_fu_96_m_axi_in_V_BREADY,
        m_axi_in_V_BRESP => ap_const_lv2_0,
        m_axi_in_V_BID => ap_const_lv1_0,
        m_axi_in_V_BUSER => ap_const_lv1_0,
        in_V_offset => in_V_offset,
        elemStream_V_V_din => grp_dataflow_in_loop_fu_96_elemStream_V_V_din,
        elemStream_V_V_full_n => elemStream_V_V_full_n,
        elemStream_V_V_write => grp_dataflow_in_loop_fu_96_elemStream_V_V_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        elem_0_ap_vld => ap_const_logic_1,
        j_0_ap_vld => ap_const_logic_1,
        address_ap_vld => ap_const_logic_1,
        in_V_offset_ap_vld => ap_const_logic_1,
        ap_start => grp_dataflow_in_loop_fu_96_ap_start,
        ap_done => grp_dataflow_in_loop_fu_96_ap_done,
        ap_ready => grp_dataflow_in_loop_fu_96_ap_ready,
        ap_idle => grp_dataflow_in_loop_fu_96_ap_idle,
        ap_continue => grp_dataflow_in_loop_fu_96_ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_in_loop_fu_96_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_dataflow_in_loop_fu_96_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_on_subcall_done))) then 
                    ap_sync_reg_grp_dataflow_in_loop_fu_96_ap_done <= ap_const_logic_0;
                elsif ((grp_dataflow_in_loop_fu_96_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_in_loop_fu_96_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_in_loop_fu_96_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_dataflow_in_loop_fu_96_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_on_subcall_done))) then 
                    ap_sync_reg_grp_dataflow_in_loop_fu_96_ap_ready <= ap_const_logic_0;
                elsif ((grp_dataflow_in_loop_fu_96_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_in_loop_fu_96_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_dataflow_in_loop_fu_96_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dataflow_in_loop_fu_96_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_sync_grp_dataflow_in_loop_fu_96_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((icmp_ln38_fu_131_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    grp_dataflow_in_loop_fu_96_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dataflow_in_loop_fu_96_ap_ready = ap_const_logic_1)) then 
                    grp_dataflow_in_loop_fu_96_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    j_0_reg_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_on_subcall_done))) then 
                j_0_reg_84 <= j_reg_229;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_84 <= ap_const_lv24_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln37_reg_211 <= icmp_ln37_fu_165_p2;
                rounds_2_reg_216 <= rounds_2_fu_181_p3;
                sext_ln40_reg_221 <= sext_ln40_fu_157_p1;
                    zext_ln34_reg_206(8 downto 0) <= zext_ln34_fu_119_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                j_reg_229 <= j_fu_151_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_131_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                select_ln37_reg_234 <= select_ln37_fu_188_p3;
            end if;
        end if;
    end process;
    zext_ln34_reg_206(9) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln38_fu_131_p2, ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln38_fu_131_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln40_fu_170_p2 <= std_logic_vector(signed(ap_const_lv24_FFFFFF) + signed(rounds_2_fu_181_p3));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state3_on_subcall_done_assign_proc : process(ap_sync_grp_dataflow_in_loop_fu_96_ap_ready, ap_sync_grp_dataflow_in_loop_fu_96_ap_done)
    begin
                ap_block_state3_on_subcall_done <= ((ap_sync_grp_dataflow_in_loop_fu_96_ap_ready and ap_sync_grp_dataflow_in_loop_fu_96_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln38_fu_131_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln38_fu_131_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln38_fu_131_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln38_fu_131_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_grp_dataflow_in_loop_fu_96_ap_done <= (grp_dataflow_in_loop_fu_96_ap_done or ap_sync_reg_grp_dataflow_in_loop_fu_96_ap_done);
    ap_sync_grp_dataflow_in_loop_fu_96_ap_ready <= (grp_dataflow_in_loop_fu_96_ap_ready or ap_sync_reg_grp_dataflow_in_loop_fu_96_ap_ready);
    elemStream_V_V_din <= grp_dataflow_in_loop_fu_96_elemStream_V_V_din;

    elemStream_V_V_write_assign_proc : process(grp_dataflow_in_loop_fu_96_elemStream_V_V_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            elemStream_V_V_write <= grp_dataflow_in_loop_fu_96_elemStream_V_V_write;
        else 
            elemStream_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    elem_fu_123_p1 <= data_len(9 - 1 downto 0);

    grp_dataflow_in_loop_fu_96_ap_continue_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_on_subcall_done))) then 
            grp_dataflow_in_loop_fu_96_ap_continue <= ap_const_logic_1;
        else 
            grp_dataflow_in_loop_fu_96_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_dataflow_in_loop_fu_96_ap_start <= grp_dataflow_in_loop_fu_96_ap_start_reg;
    icmp_ln37_fu_165_p2 <= "1" when (elem_fu_123_p1 = ap_const_lv9_0) else "0";
    icmp_ln38_fu_131_p2 <= "1" when (j_0_reg_84 = rounds_2_reg_216) else "0";
    icmp_ln40_fu_176_p2 <= "1" when (zext_ln38_fu_161_p1 = sext_ln40_reg_221) else "0";
    j_fu_151_p2 <= std_logic_vector(unsigned(j_0_reg_84) + unsigned(ap_const_lv24_1));
    m_axi_in_V_ARADDR <= grp_dataflow_in_loop_fu_96_m_axi_in_V_ARADDR;
    m_axi_in_V_ARBURST <= grp_dataflow_in_loop_fu_96_m_axi_in_V_ARBURST;
    m_axi_in_V_ARCACHE <= grp_dataflow_in_loop_fu_96_m_axi_in_V_ARCACHE;
    m_axi_in_V_ARID <= grp_dataflow_in_loop_fu_96_m_axi_in_V_ARID;
    m_axi_in_V_ARLEN <= grp_dataflow_in_loop_fu_96_m_axi_in_V_ARLEN;
    m_axi_in_V_ARLOCK <= grp_dataflow_in_loop_fu_96_m_axi_in_V_ARLOCK;
    m_axi_in_V_ARPROT <= grp_dataflow_in_loop_fu_96_m_axi_in_V_ARPROT;
    m_axi_in_V_ARQOS <= grp_dataflow_in_loop_fu_96_m_axi_in_V_ARQOS;
    m_axi_in_V_ARREGION <= grp_dataflow_in_loop_fu_96_m_axi_in_V_ARREGION;
    m_axi_in_V_ARSIZE <= grp_dataflow_in_loop_fu_96_m_axi_in_V_ARSIZE;
    m_axi_in_V_ARUSER <= grp_dataflow_in_loop_fu_96_m_axi_in_V_ARUSER;

    m_axi_in_V_ARVALID_assign_proc : process(ap_CS_fsm_state2, icmp_ln38_fu_131_p2, grp_dataflow_in_loop_fu_96_m_axi_in_V_ARVALID, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln38_fu_131_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            m_axi_in_V_ARVALID <= grp_dataflow_in_loop_fu_96_m_axi_in_V_ARVALID;
        else 
            m_axi_in_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_in_V_AWADDR <= ap_const_lv64_0;
    m_axi_in_V_AWBURST <= ap_const_lv2_0;
    m_axi_in_V_AWCACHE <= ap_const_lv4_0;
    m_axi_in_V_AWID <= ap_const_lv1_0;
    m_axi_in_V_AWLEN <= ap_const_lv32_0;
    m_axi_in_V_AWLOCK <= ap_const_lv2_0;
    m_axi_in_V_AWPROT <= ap_const_lv3_0;
    m_axi_in_V_AWQOS <= ap_const_lv4_0;
    m_axi_in_V_AWREGION <= ap_const_lv4_0;
    m_axi_in_V_AWSIZE <= ap_const_lv3_0;
    m_axi_in_V_AWUSER <= ap_const_lv1_0;
    m_axi_in_V_AWVALID <= ap_const_logic_0;
    m_axi_in_V_BREADY <= ap_const_logic_0;

    m_axi_in_V_RREADY_assign_proc : process(ap_CS_fsm_state2, icmp_ln38_fu_131_p2, grp_dataflow_in_loop_fu_96_m_axi_in_V_RREADY, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln38_fu_131_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            m_axi_in_V_RREADY <= grp_dataflow_in_loop_fu_96_m_axi_in_V_RREADY;
        else 
            m_axi_in_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_in_V_WDATA <= ap_const_lv512_lc_1;
    m_axi_in_V_WID <= ap_const_lv1_0;
    m_axi_in_V_WLAST <= ap_const_logic_0;
    m_axi_in_V_WSTRB <= ap_const_lv64_0;
    m_axi_in_V_WUSER <= ap_const_lv1_0;
    m_axi_in_V_WVALID <= ap_const_logic_0;
    rounds_2_fu_181_p3 <= 
        zext_ln33_fu_127_p1 when (icmp_ln37_fu_165_p2(0) = '1') else 
        rounds_fu_137_p2;
    rounds_fu_137_p2 <= std_logic_vector(unsigned(ap_const_lv24_1) + unsigned(zext_ln33_fu_127_p1));
    select_ln37_fu_188_p3 <= 
        ap_const_lv10_200 when (icmp_ln37_reg_211(0) = '1') else 
        select_ln40_fu_143_p3;
    select_ln40_fu_143_p3 <= 
        zext_ln34_reg_206 when (icmp_ln40_fu_176_p2(0) = '1') else 
        ap_const_lv10_200;
        sext_ln40_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln40_fu_170_p2),25));

    tmp_fu_109_p4 <= data_len(31 downto 9);
    zext_ln33_fu_127_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_109_p4),24));
    zext_ln34_fu_119_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(elem_fu_123_p1),10));
    zext_ln38_fu_161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_84),25));
end behav;
