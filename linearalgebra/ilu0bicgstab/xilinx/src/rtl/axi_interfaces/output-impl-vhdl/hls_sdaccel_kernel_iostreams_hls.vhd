-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_sdaccel_kernel_iostreams_hls is
generic (
    C_M_AXI_GMEM0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_GMEM0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_GMEM1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM1_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_BUSER_WIDTH-1 downto 0);
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of hls_sdaccel_kernel_iostreams_hls is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hls_sdaccel_kernel_iostreams_hls,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-fsgd2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.600000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=162,HLS_SYN_DSP=0,HLS_SYN_FF=6776,HLS_SYN_LUT=6702,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal mem_in_V : STD_LOGIC_VECTOR (63 downto 0);
    signal mem_out_V : STD_LOGIC_VECTOR (63 downto 0);
    signal mem_in_address : STD_LOGIC_VECTOR (63 downto 0);
    signal mem_out_address : STD_LOGIC_VECTOR (63 downto 0);
    signal data_len : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_AWREADY : STD_LOGIC;
    signal gmem0_WREADY : STD_LOGIC;
    signal gmem0_ARVALID : STD_LOGIC;
    signal gmem0_ARREADY : STD_LOGIC;
    signal gmem0_RVALID : STD_LOGIC;
    signal gmem0_RREADY : STD_LOGIC;
    signal gmem0_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem0_RLAST : STD_LOGIC;
    signal gmem0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BVALID : STD_LOGIC;
    signal gmem0_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_AWVALID : STD_LOGIC;
    signal gmem1_AWREADY : STD_LOGIC;
    signal gmem1_WVALID : STD_LOGIC;
    signal gmem1_WREADY : STD_LOGIC;
    signal gmem1_ARREADY : STD_LOGIC;
    signal gmem1_RVALID : STD_LOGIC;
    signal gmem1_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem1_RLAST : STD_LOGIC;
    signal gmem1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BVALID : STD_LOGIC;
    signal gmem1_BREADY : STD_LOGIC;
    signal gmem1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_out_V3_reg_126 : STD_LOGIC_VECTOR (57 downto 0);
    signal mem_out_address_read_reg_131 : STD_LOGIC_VECTOR (63 downto 0);
    signal mem_in_V1_reg_136 : STD_LOGIC_VECTOR (57 downto 0);
    signal data_len_read_reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_in_address_read_reg_146 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_flow_in_compute_out_fu_86_ap_start : STD_LOGIC;
    signal grp_flow_in_compute_out_fu_86_ap_done : STD_LOGIC;
    signal grp_flow_in_compute_out_fu_86_ap_idle : STD_LOGIC;
    signal grp_flow_in_compute_out_fu_86_ap_ready : STD_LOGIC;
    signal grp_flow_in_compute_out_fu_86_m_axi_in_V_AWVALID : STD_LOGIC;
    signal grp_flow_in_compute_out_fu_86_m_axi_in_V_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_in_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_in_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_in_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_in_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_in_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_in_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_in_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_in_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_in_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_in_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_in_V_WVALID : STD_LOGIC;
    signal grp_flow_in_compute_out_fu_86_m_axi_in_V_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_in_V_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_in_V_WLAST : STD_LOGIC;
    signal grp_flow_in_compute_out_fu_86_m_axi_in_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_in_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_in_V_ARVALID : STD_LOGIC;
    signal grp_flow_in_compute_out_fu_86_m_axi_in_V_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_in_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_in_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_in_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_in_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_in_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_in_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_in_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_in_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_in_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_in_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_in_V_RREADY : STD_LOGIC;
    signal grp_flow_in_compute_out_fu_86_m_axi_in_V_BREADY : STD_LOGIC;
    signal grp_flow_in_compute_out_fu_86_m_axi_out_V_AWVALID : STD_LOGIC;
    signal grp_flow_in_compute_out_fu_86_m_axi_out_V_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_out_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_out_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_out_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_out_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_out_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_out_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_out_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_out_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_out_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_out_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_out_V_WVALID : STD_LOGIC;
    signal grp_flow_in_compute_out_fu_86_m_axi_out_V_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_out_V_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_out_V_WLAST : STD_LOGIC;
    signal grp_flow_in_compute_out_fu_86_m_axi_out_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_out_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_out_V_ARVALID : STD_LOGIC;
    signal grp_flow_in_compute_out_fu_86_m_axi_out_V_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_out_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_out_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_out_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_out_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_out_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_out_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_out_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_out_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_out_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_out_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_flow_in_compute_out_fu_86_m_axi_out_V_RREADY : STD_LOGIC;
    signal grp_flow_in_compute_out_fu_86_m_axi_out_V_BREADY : STD_LOGIC;
    signal grp_flow_in_compute_out_fu_86_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component flow_in_compute_out IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_in_V_AWVALID : OUT STD_LOGIC;
        m_axi_in_V_AWREADY : IN STD_LOGIC;
        m_axi_in_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_in_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_WVALID : OUT STD_LOGIC;
        m_axi_in_V_WREADY : IN STD_LOGIC;
        m_axi_in_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_in_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_in_V_WLAST : OUT STD_LOGIC;
        m_axi_in_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_ARVALID : OUT STD_LOGIC;
        m_axi_in_V_ARREADY : IN STD_LOGIC;
        m_axi_in_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_in_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_RVALID : IN STD_LOGIC;
        m_axi_in_V_RREADY : OUT STD_LOGIC;
        m_axi_in_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_in_V_RLAST : IN STD_LOGIC;
        m_axi_in_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_V_BVALID : IN STD_LOGIC;
        m_axi_in_V_BREADY : OUT STD_LOGIC;
        m_axi_in_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        in_V_offset : IN STD_LOGIC_VECTOR (57 downto 0);
        m_axi_out_V_AWVALID : OUT STD_LOGIC;
        m_axi_out_V_AWREADY : IN STD_LOGIC;
        m_axi_out_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_out_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_out_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_out_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_out_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_WVALID : OUT STD_LOGIC;
        m_axi_out_V_WREADY : IN STD_LOGIC;
        m_axi_out_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_out_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_out_V_WLAST : OUT STD_LOGIC;
        m_axi_out_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_ARVALID : OUT STD_LOGIC;
        m_axi_out_V_ARREADY : IN STD_LOGIC;
        m_axi_out_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_out_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_out_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_out_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_out_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_RVALID : IN STD_LOGIC;
        m_axi_out_V_RREADY : OUT STD_LOGIC;
        m_axi_out_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_out_V_RLAST : IN STD_LOGIC;
        m_axi_out_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_V_BVALID : IN STD_LOGIC;
        m_axi_out_V_BREADY : OUT STD_LOGIC;
        m_axi_out_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        out_V_offset : IN STD_LOGIC_VECTOR (57 downto 0);
        mem_in_address : IN STD_LOGIC_VECTOR (63 downto 0);
        mem_out_address : IN STD_LOGIC_VECTOR (63 downto 0);
        data_len : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hls_sdaccel_kernel_iostreams_hls_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        mem_in_V : OUT STD_LOGIC_VECTOR (63 downto 0);
        mem_out_V : OUT STD_LOGIC_VECTOR (63 downto 0);
        mem_in_address : OUT STD_LOGIC_VECTOR (63 downto 0);
        mem_out_address : OUT STD_LOGIC_VECTOR (63 downto 0);
        data_len : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hls_sdaccel_kernel_iostreams_hls_gmem0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component hls_sdaccel_kernel_iostreams_hls_gmem1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    hls_sdaccel_kernel_iostreams_hls_control_s_axi_U : component hls_sdaccel_kernel_iostreams_hls_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        mem_in_V => mem_in_V,
        mem_out_V => mem_out_V,
        mem_in_address => mem_in_address,
        mem_out_address => mem_out_address,
        data_len => data_len);

    hls_sdaccel_kernel_iostreams_hls_gmem0_m_axi_U : component hls_sdaccel_kernel_iostreams_hls_gmem0_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 512,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM0_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem0_AWVALID,
        AWREADY => m_axi_gmem0_AWREADY,
        AWADDR => m_axi_gmem0_AWADDR,
        AWID => m_axi_gmem0_AWID,
        AWLEN => m_axi_gmem0_AWLEN,
        AWSIZE => m_axi_gmem0_AWSIZE,
        AWBURST => m_axi_gmem0_AWBURST,
        AWLOCK => m_axi_gmem0_AWLOCK,
        AWCACHE => m_axi_gmem0_AWCACHE,
        AWPROT => m_axi_gmem0_AWPROT,
        AWQOS => m_axi_gmem0_AWQOS,
        AWREGION => m_axi_gmem0_AWREGION,
        AWUSER => m_axi_gmem0_AWUSER,
        WVALID => m_axi_gmem0_WVALID,
        WREADY => m_axi_gmem0_WREADY,
        WDATA => m_axi_gmem0_WDATA,
        WSTRB => m_axi_gmem0_WSTRB,
        WLAST => m_axi_gmem0_WLAST,
        WID => m_axi_gmem0_WID,
        WUSER => m_axi_gmem0_WUSER,
        ARVALID => m_axi_gmem0_ARVALID,
        ARREADY => m_axi_gmem0_ARREADY,
        ARADDR => m_axi_gmem0_ARADDR,
        ARID => m_axi_gmem0_ARID,
        ARLEN => m_axi_gmem0_ARLEN,
        ARSIZE => m_axi_gmem0_ARSIZE,
        ARBURST => m_axi_gmem0_ARBURST,
        ARLOCK => m_axi_gmem0_ARLOCK,
        ARCACHE => m_axi_gmem0_ARCACHE,
        ARPROT => m_axi_gmem0_ARPROT,
        ARQOS => m_axi_gmem0_ARQOS,
        ARREGION => m_axi_gmem0_ARREGION,
        ARUSER => m_axi_gmem0_ARUSER,
        RVALID => m_axi_gmem0_RVALID,
        RREADY => m_axi_gmem0_RREADY,
        RDATA => m_axi_gmem0_RDATA,
        RLAST => m_axi_gmem0_RLAST,
        RID => m_axi_gmem0_RID,
        RUSER => m_axi_gmem0_RUSER,
        RRESP => m_axi_gmem0_RRESP,
        BVALID => m_axi_gmem0_BVALID,
        BREADY => m_axi_gmem0_BREADY,
        BRESP => m_axi_gmem0_BRESP,
        BID => m_axi_gmem0_BID,
        BUSER => m_axi_gmem0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem0_ARVALID,
        I_ARREADY => gmem0_ARREADY,
        I_ARADDR => grp_flow_in_compute_out_fu_86_m_axi_in_V_ARADDR,
        I_ARID => grp_flow_in_compute_out_fu_86_m_axi_in_V_ARID,
        I_ARLEN => grp_flow_in_compute_out_fu_86_m_axi_in_V_ARLEN,
        I_ARSIZE => grp_flow_in_compute_out_fu_86_m_axi_in_V_ARSIZE,
        I_ARLOCK => grp_flow_in_compute_out_fu_86_m_axi_in_V_ARLOCK,
        I_ARCACHE => grp_flow_in_compute_out_fu_86_m_axi_in_V_ARCACHE,
        I_ARQOS => grp_flow_in_compute_out_fu_86_m_axi_in_V_ARQOS,
        I_ARPROT => grp_flow_in_compute_out_fu_86_m_axi_in_V_ARPROT,
        I_ARUSER => grp_flow_in_compute_out_fu_86_m_axi_in_V_ARUSER,
        I_ARBURST => grp_flow_in_compute_out_fu_86_m_axi_in_V_ARBURST,
        I_ARREGION => grp_flow_in_compute_out_fu_86_m_axi_in_V_ARREGION,
        I_RVALID => gmem0_RVALID,
        I_RREADY => gmem0_RREADY,
        I_RDATA => gmem0_RDATA,
        I_RID => gmem0_RID,
        I_RUSER => gmem0_RUSER,
        I_RRESP => gmem0_RRESP,
        I_RLAST => gmem0_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem0_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem0_WREADY,
        I_WDATA => ap_const_lv512_lc_1,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv64_0,
        I_BVALID => gmem0_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem0_BRESP,
        I_BID => gmem0_BID,
        I_BUSER => gmem0_BUSER);

    hls_sdaccel_kernel_iostreams_hls_gmem1_m_axi_U : component hls_sdaccel_kernel_iostreams_hls_gmem1_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 512,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem1_AWVALID,
        AWREADY => m_axi_gmem1_AWREADY,
        AWADDR => m_axi_gmem1_AWADDR,
        AWID => m_axi_gmem1_AWID,
        AWLEN => m_axi_gmem1_AWLEN,
        AWSIZE => m_axi_gmem1_AWSIZE,
        AWBURST => m_axi_gmem1_AWBURST,
        AWLOCK => m_axi_gmem1_AWLOCK,
        AWCACHE => m_axi_gmem1_AWCACHE,
        AWPROT => m_axi_gmem1_AWPROT,
        AWQOS => m_axi_gmem1_AWQOS,
        AWREGION => m_axi_gmem1_AWREGION,
        AWUSER => m_axi_gmem1_AWUSER,
        WVALID => m_axi_gmem1_WVALID,
        WREADY => m_axi_gmem1_WREADY,
        WDATA => m_axi_gmem1_WDATA,
        WSTRB => m_axi_gmem1_WSTRB,
        WLAST => m_axi_gmem1_WLAST,
        WID => m_axi_gmem1_WID,
        WUSER => m_axi_gmem1_WUSER,
        ARVALID => m_axi_gmem1_ARVALID,
        ARREADY => m_axi_gmem1_ARREADY,
        ARADDR => m_axi_gmem1_ARADDR,
        ARID => m_axi_gmem1_ARID,
        ARLEN => m_axi_gmem1_ARLEN,
        ARSIZE => m_axi_gmem1_ARSIZE,
        ARBURST => m_axi_gmem1_ARBURST,
        ARLOCK => m_axi_gmem1_ARLOCK,
        ARCACHE => m_axi_gmem1_ARCACHE,
        ARPROT => m_axi_gmem1_ARPROT,
        ARQOS => m_axi_gmem1_ARQOS,
        ARREGION => m_axi_gmem1_ARREGION,
        ARUSER => m_axi_gmem1_ARUSER,
        RVALID => m_axi_gmem1_RVALID,
        RREADY => m_axi_gmem1_RREADY,
        RDATA => m_axi_gmem1_RDATA,
        RLAST => m_axi_gmem1_RLAST,
        RID => m_axi_gmem1_RID,
        RUSER => m_axi_gmem1_RUSER,
        RRESP => m_axi_gmem1_RRESP,
        BVALID => m_axi_gmem1_BVALID,
        BREADY => m_axi_gmem1_BREADY,
        BRESP => m_axi_gmem1_BRESP,
        BID => m_axi_gmem1_BID,
        BUSER => m_axi_gmem1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem1_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem1_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem1_RDATA,
        I_RID => gmem1_RID,
        I_RUSER => gmem1_RUSER,
        I_RRESP => gmem1_RRESP,
        I_RLAST => gmem1_RLAST,
        I_AWVALID => gmem1_AWVALID,
        I_AWREADY => gmem1_AWREADY,
        I_AWADDR => grp_flow_in_compute_out_fu_86_m_axi_out_V_AWADDR,
        I_AWID => grp_flow_in_compute_out_fu_86_m_axi_out_V_AWID,
        I_AWLEN => grp_flow_in_compute_out_fu_86_m_axi_out_V_AWLEN,
        I_AWSIZE => grp_flow_in_compute_out_fu_86_m_axi_out_V_AWSIZE,
        I_AWLOCK => grp_flow_in_compute_out_fu_86_m_axi_out_V_AWLOCK,
        I_AWCACHE => grp_flow_in_compute_out_fu_86_m_axi_out_V_AWCACHE,
        I_AWQOS => grp_flow_in_compute_out_fu_86_m_axi_out_V_AWQOS,
        I_AWPROT => grp_flow_in_compute_out_fu_86_m_axi_out_V_AWPROT,
        I_AWUSER => grp_flow_in_compute_out_fu_86_m_axi_out_V_AWUSER,
        I_AWBURST => grp_flow_in_compute_out_fu_86_m_axi_out_V_AWBURST,
        I_AWREGION => grp_flow_in_compute_out_fu_86_m_axi_out_V_AWREGION,
        I_WVALID => gmem1_WVALID,
        I_WREADY => gmem1_WREADY,
        I_WDATA => grp_flow_in_compute_out_fu_86_m_axi_out_V_WDATA,
        I_WID => grp_flow_in_compute_out_fu_86_m_axi_out_V_WID,
        I_WUSER => grp_flow_in_compute_out_fu_86_m_axi_out_V_WUSER,
        I_WLAST => grp_flow_in_compute_out_fu_86_m_axi_out_V_WLAST,
        I_WSTRB => grp_flow_in_compute_out_fu_86_m_axi_out_V_WSTRB,
        I_BVALID => gmem1_BVALID,
        I_BREADY => gmem1_BREADY,
        I_BRESP => gmem1_BRESP,
        I_BID => gmem1_BID,
        I_BUSER => gmem1_BUSER);

    grp_flow_in_compute_out_fu_86 : component flow_in_compute_out
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_flow_in_compute_out_fu_86_ap_start,
        ap_done => grp_flow_in_compute_out_fu_86_ap_done,
        ap_idle => grp_flow_in_compute_out_fu_86_ap_idle,
        ap_ready => grp_flow_in_compute_out_fu_86_ap_ready,
        m_axi_in_V_AWVALID => grp_flow_in_compute_out_fu_86_m_axi_in_V_AWVALID,
        m_axi_in_V_AWREADY => ap_const_logic_0,
        m_axi_in_V_AWADDR => grp_flow_in_compute_out_fu_86_m_axi_in_V_AWADDR,
        m_axi_in_V_AWID => grp_flow_in_compute_out_fu_86_m_axi_in_V_AWID,
        m_axi_in_V_AWLEN => grp_flow_in_compute_out_fu_86_m_axi_in_V_AWLEN,
        m_axi_in_V_AWSIZE => grp_flow_in_compute_out_fu_86_m_axi_in_V_AWSIZE,
        m_axi_in_V_AWBURST => grp_flow_in_compute_out_fu_86_m_axi_in_V_AWBURST,
        m_axi_in_V_AWLOCK => grp_flow_in_compute_out_fu_86_m_axi_in_V_AWLOCK,
        m_axi_in_V_AWCACHE => grp_flow_in_compute_out_fu_86_m_axi_in_V_AWCACHE,
        m_axi_in_V_AWPROT => grp_flow_in_compute_out_fu_86_m_axi_in_V_AWPROT,
        m_axi_in_V_AWQOS => grp_flow_in_compute_out_fu_86_m_axi_in_V_AWQOS,
        m_axi_in_V_AWREGION => grp_flow_in_compute_out_fu_86_m_axi_in_V_AWREGION,
        m_axi_in_V_AWUSER => grp_flow_in_compute_out_fu_86_m_axi_in_V_AWUSER,
        m_axi_in_V_WVALID => grp_flow_in_compute_out_fu_86_m_axi_in_V_WVALID,
        m_axi_in_V_WREADY => ap_const_logic_0,
        m_axi_in_V_WDATA => grp_flow_in_compute_out_fu_86_m_axi_in_V_WDATA,
        m_axi_in_V_WSTRB => grp_flow_in_compute_out_fu_86_m_axi_in_V_WSTRB,
        m_axi_in_V_WLAST => grp_flow_in_compute_out_fu_86_m_axi_in_V_WLAST,
        m_axi_in_V_WID => grp_flow_in_compute_out_fu_86_m_axi_in_V_WID,
        m_axi_in_V_WUSER => grp_flow_in_compute_out_fu_86_m_axi_in_V_WUSER,
        m_axi_in_V_ARVALID => grp_flow_in_compute_out_fu_86_m_axi_in_V_ARVALID,
        m_axi_in_V_ARREADY => gmem0_ARREADY,
        m_axi_in_V_ARADDR => grp_flow_in_compute_out_fu_86_m_axi_in_V_ARADDR,
        m_axi_in_V_ARID => grp_flow_in_compute_out_fu_86_m_axi_in_V_ARID,
        m_axi_in_V_ARLEN => grp_flow_in_compute_out_fu_86_m_axi_in_V_ARLEN,
        m_axi_in_V_ARSIZE => grp_flow_in_compute_out_fu_86_m_axi_in_V_ARSIZE,
        m_axi_in_V_ARBURST => grp_flow_in_compute_out_fu_86_m_axi_in_V_ARBURST,
        m_axi_in_V_ARLOCK => grp_flow_in_compute_out_fu_86_m_axi_in_V_ARLOCK,
        m_axi_in_V_ARCACHE => grp_flow_in_compute_out_fu_86_m_axi_in_V_ARCACHE,
        m_axi_in_V_ARPROT => grp_flow_in_compute_out_fu_86_m_axi_in_V_ARPROT,
        m_axi_in_V_ARQOS => grp_flow_in_compute_out_fu_86_m_axi_in_V_ARQOS,
        m_axi_in_V_ARREGION => grp_flow_in_compute_out_fu_86_m_axi_in_V_ARREGION,
        m_axi_in_V_ARUSER => grp_flow_in_compute_out_fu_86_m_axi_in_V_ARUSER,
        m_axi_in_V_RVALID => gmem0_RVALID,
        m_axi_in_V_RREADY => grp_flow_in_compute_out_fu_86_m_axi_in_V_RREADY,
        m_axi_in_V_RDATA => gmem0_RDATA,
        m_axi_in_V_RLAST => gmem0_RLAST,
        m_axi_in_V_RID => gmem0_RID,
        m_axi_in_V_RUSER => gmem0_RUSER,
        m_axi_in_V_RRESP => gmem0_RRESP,
        m_axi_in_V_BVALID => ap_const_logic_0,
        m_axi_in_V_BREADY => grp_flow_in_compute_out_fu_86_m_axi_in_V_BREADY,
        m_axi_in_V_BRESP => ap_const_lv2_0,
        m_axi_in_V_BID => ap_const_lv1_0,
        m_axi_in_V_BUSER => ap_const_lv1_0,
        in_V_offset => mem_in_V1_reg_136,
        m_axi_out_V_AWVALID => grp_flow_in_compute_out_fu_86_m_axi_out_V_AWVALID,
        m_axi_out_V_AWREADY => gmem1_AWREADY,
        m_axi_out_V_AWADDR => grp_flow_in_compute_out_fu_86_m_axi_out_V_AWADDR,
        m_axi_out_V_AWID => grp_flow_in_compute_out_fu_86_m_axi_out_V_AWID,
        m_axi_out_V_AWLEN => grp_flow_in_compute_out_fu_86_m_axi_out_V_AWLEN,
        m_axi_out_V_AWSIZE => grp_flow_in_compute_out_fu_86_m_axi_out_V_AWSIZE,
        m_axi_out_V_AWBURST => grp_flow_in_compute_out_fu_86_m_axi_out_V_AWBURST,
        m_axi_out_V_AWLOCK => grp_flow_in_compute_out_fu_86_m_axi_out_V_AWLOCK,
        m_axi_out_V_AWCACHE => grp_flow_in_compute_out_fu_86_m_axi_out_V_AWCACHE,
        m_axi_out_V_AWPROT => grp_flow_in_compute_out_fu_86_m_axi_out_V_AWPROT,
        m_axi_out_V_AWQOS => grp_flow_in_compute_out_fu_86_m_axi_out_V_AWQOS,
        m_axi_out_V_AWREGION => grp_flow_in_compute_out_fu_86_m_axi_out_V_AWREGION,
        m_axi_out_V_AWUSER => grp_flow_in_compute_out_fu_86_m_axi_out_V_AWUSER,
        m_axi_out_V_WVALID => grp_flow_in_compute_out_fu_86_m_axi_out_V_WVALID,
        m_axi_out_V_WREADY => gmem1_WREADY,
        m_axi_out_V_WDATA => grp_flow_in_compute_out_fu_86_m_axi_out_V_WDATA,
        m_axi_out_V_WSTRB => grp_flow_in_compute_out_fu_86_m_axi_out_V_WSTRB,
        m_axi_out_V_WLAST => grp_flow_in_compute_out_fu_86_m_axi_out_V_WLAST,
        m_axi_out_V_WID => grp_flow_in_compute_out_fu_86_m_axi_out_V_WID,
        m_axi_out_V_WUSER => grp_flow_in_compute_out_fu_86_m_axi_out_V_WUSER,
        m_axi_out_V_ARVALID => grp_flow_in_compute_out_fu_86_m_axi_out_V_ARVALID,
        m_axi_out_V_ARREADY => ap_const_logic_0,
        m_axi_out_V_ARADDR => grp_flow_in_compute_out_fu_86_m_axi_out_V_ARADDR,
        m_axi_out_V_ARID => grp_flow_in_compute_out_fu_86_m_axi_out_V_ARID,
        m_axi_out_V_ARLEN => grp_flow_in_compute_out_fu_86_m_axi_out_V_ARLEN,
        m_axi_out_V_ARSIZE => grp_flow_in_compute_out_fu_86_m_axi_out_V_ARSIZE,
        m_axi_out_V_ARBURST => grp_flow_in_compute_out_fu_86_m_axi_out_V_ARBURST,
        m_axi_out_V_ARLOCK => grp_flow_in_compute_out_fu_86_m_axi_out_V_ARLOCK,
        m_axi_out_V_ARCACHE => grp_flow_in_compute_out_fu_86_m_axi_out_V_ARCACHE,
        m_axi_out_V_ARPROT => grp_flow_in_compute_out_fu_86_m_axi_out_V_ARPROT,
        m_axi_out_V_ARQOS => grp_flow_in_compute_out_fu_86_m_axi_out_V_ARQOS,
        m_axi_out_V_ARREGION => grp_flow_in_compute_out_fu_86_m_axi_out_V_ARREGION,
        m_axi_out_V_ARUSER => grp_flow_in_compute_out_fu_86_m_axi_out_V_ARUSER,
        m_axi_out_V_RVALID => ap_const_logic_0,
        m_axi_out_V_RREADY => grp_flow_in_compute_out_fu_86_m_axi_out_V_RREADY,
        m_axi_out_V_RDATA => ap_const_lv512_lc_1,
        m_axi_out_V_RLAST => ap_const_logic_0,
        m_axi_out_V_RID => ap_const_lv1_0,
        m_axi_out_V_RUSER => ap_const_lv1_0,
        m_axi_out_V_RRESP => ap_const_lv2_0,
        m_axi_out_V_BVALID => gmem1_BVALID,
        m_axi_out_V_BREADY => grp_flow_in_compute_out_fu_86_m_axi_out_V_BREADY,
        m_axi_out_V_BRESP => gmem1_BRESP,
        m_axi_out_V_BID => gmem1_BID,
        m_axi_out_V_BUSER => gmem1_BUSER,
        out_V_offset => mem_out_V3_reg_126,
        mem_in_address => mem_in_address_read_reg_146,
        mem_out_address => mem_out_address_read_reg_131,
        data_len => data_len_read_reg_141);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_flow_in_compute_out_fu_86_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_flow_in_compute_out_fu_86_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_flow_in_compute_out_fu_86_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_flow_in_compute_out_fu_86_ap_ready = ap_const_logic_1)) then 
                    grp_flow_in_compute_out_fu_86_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                data_len_read_reg_141 <= data_len;
                mem_in_V1_reg_136 <= mem_in_V(63 downto 6);
                mem_in_address_read_reg_146 <= mem_in_address;
                mem_out_V3_reg_126 <= mem_out_V(63 downto 6);
                mem_out_address_read_reg_131 <= mem_out_address;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_flow_in_compute_out_fu_86_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_flow_in_compute_out_fu_86_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(grp_flow_in_compute_out_fu_86_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_flow_in_compute_out_fu_86_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_flow_in_compute_out_fu_86_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_flow_in_compute_out_fu_86_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    gmem0_ARVALID_assign_proc : process(ap_CS_fsm_state1, grp_flow_in_compute_out_fu_86_m_axi_in_V_ARVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gmem0_ARVALID <= grp_flow_in_compute_out_fu_86_m_axi_in_V_ARVALID;
        else 
            gmem0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_RREADY_assign_proc : process(ap_CS_fsm_state1, grp_flow_in_compute_out_fu_86_m_axi_in_V_RREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gmem0_RREADY <= grp_flow_in_compute_out_fu_86_m_axi_in_V_RREADY;
        else 
            gmem0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_AWVALID_assign_proc : process(ap_CS_fsm_state1, grp_flow_in_compute_out_fu_86_m_axi_out_V_AWVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gmem1_AWVALID <= grp_flow_in_compute_out_fu_86_m_axi_out_V_AWVALID;
        else 
            gmem1_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_BREADY_assign_proc : process(ap_CS_fsm_state1, grp_flow_in_compute_out_fu_86_m_axi_out_V_BREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gmem1_BREADY <= grp_flow_in_compute_out_fu_86_m_axi_out_V_BREADY;
        else 
            gmem1_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_WVALID_assign_proc : process(ap_CS_fsm_state1, grp_flow_in_compute_out_fu_86_m_axi_out_V_WVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gmem1_WVALID <= grp_flow_in_compute_out_fu_86_m_axi_out_V_WVALID;
        else 
            gmem1_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    grp_flow_in_compute_out_fu_86_ap_start <= grp_flow_in_compute_out_fu_86_ap_start_reg;
end behav;
