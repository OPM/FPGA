-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dataflow_in_loop is
port (
    elem_0 : IN STD_LOGIC_VECTOR (9 downto 0);
    j_0 : IN STD_LOGIC_VECTOR (23 downto 0);
    address : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_in_V_AWVALID : OUT STD_LOGIC;
    m_axi_in_V_AWREADY : IN STD_LOGIC;
    m_axi_in_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_in_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_in_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_V_WVALID : OUT STD_LOGIC;
    m_axi_in_V_WREADY : IN STD_LOGIC;
    m_axi_in_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_in_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_in_V_WLAST : OUT STD_LOGIC;
    m_axi_in_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_V_ARVALID : OUT STD_LOGIC;
    m_axi_in_V_ARREADY : IN STD_LOGIC;
    m_axi_in_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_in_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_in_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_V_RVALID : IN STD_LOGIC;
    m_axi_in_V_RREADY : OUT STD_LOGIC;
    m_axi_in_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_in_V_RLAST : IN STD_LOGIC;
    m_axi_in_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_V_BVALID : IN STD_LOGIC;
    m_axi_in_V_BREADY : OUT STD_LOGIC;
    m_axi_in_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_V_offset : IN STD_LOGIC_VECTOR (57 downto 0);
    elemStream_V_V_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    elemStream_V_V_full_n : IN STD_LOGIC;
    elemStream_V_V_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    elem_0_ap_vld : IN STD_LOGIC;
    j_0_ap_vld : IN STD_LOGIC;
    address_ap_vld : IN STD_LOGIC;
    in_V_offset_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of dataflow_in_loop is 
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

    signal read_memory_proc_U0_ap_start : STD_LOGIC;
    signal read_memory_proc_U0_ap_done : STD_LOGIC;
    signal read_memory_proc_U0_ap_continue : STD_LOGIC;
    signal read_memory_proc_U0_ap_idle : STD_LOGIC;
    signal read_memory_proc_U0_ap_ready : STD_LOGIC;
    signal read_memory_proc_U0_start_out : STD_LOGIC;
    signal read_memory_proc_U0_start_write : STD_LOGIC;
    signal read_memory_proc_U0_m_axi_in_V_AWVALID : STD_LOGIC;
    signal read_memory_proc_U0_m_axi_in_V_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_memory_proc_U0_m_axi_in_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_memory_proc_U0_m_axi_in_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_memory_proc_U0_m_axi_in_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_memory_proc_U0_m_axi_in_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_memory_proc_U0_m_axi_in_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_memory_proc_U0_m_axi_in_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_memory_proc_U0_m_axi_in_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_memory_proc_U0_m_axi_in_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_memory_proc_U0_m_axi_in_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_memory_proc_U0_m_axi_in_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_memory_proc_U0_m_axi_in_V_WVALID : STD_LOGIC;
    signal read_memory_proc_U0_m_axi_in_V_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal read_memory_proc_U0_m_axi_in_V_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal read_memory_proc_U0_m_axi_in_V_WLAST : STD_LOGIC;
    signal read_memory_proc_U0_m_axi_in_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_memory_proc_U0_m_axi_in_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_memory_proc_U0_m_axi_in_V_ARVALID : STD_LOGIC;
    signal read_memory_proc_U0_m_axi_in_V_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_memory_proc_U0_m_axi_in_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_memory_proc_U0_m_axi_in_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_memory_proc_U0_m_axi_in_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_memory_proc_U0_m_axi_in_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_memory_proc_U0_m_axi_in_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_memory_proc_U0_m_axi_in_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_memory_proc_U0_m_axi_in_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_memory_proc_U0_m_axi_in_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_memory_proc_U0_m_axi_in_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_memory_proc_U0_m_axi_in_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_memory_proc_U0_m_axi_in_V_RREADY : STD_LOGIC;
    signal read_memory_proc_U0_m_axi_in_V_BREADY : STD_LOGIC;
    signal read_memory_proc_U0_buffer_V_local_channel_din : STD_LOGIC_VECTOR (511 downto 0);
    signal read_memory_proc_U0_buffer_V_local_channel_write : STD_LOGIC;
    signal read_memory_proc_U0_elem_0_c_din : STD_LOGIC_VECTOR (9 downto 0);
    signal read_memory_proc_U0_elem_0_c_write : STD_LOGIC;
    signal write_stream_proc_U0_ap_start : STD_LOGIC;
    signal write_stream_proc_U0_ap_done : STD_LOGIC;
    signal write_stream_proc_U0_ap_continue : STD_LOGIC;
    signal write_stream_proc_U0_ap_idle : STD_LOGIC;
    signal write_stream_proc_U0_ap_ready : STD_LOGIC;
    signal write_stream_proc_U0_elem_0_read : STD_LOGIC;
    signal write_stream_proc_U0_elemStream_V_V_din : STD_LOGIC_VECTOR (511 downto 0);
    signal write_stream_proc_U0_elemStream_V_V_write : STD_LOGIC;
    signal write_stream_proc_U0_buffer_V_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal buffer_V_local_channel_full_n : STD_LOGIC;
    signal buffer_V_local_channel_dout : STD_LOGIC_VECTOR (511 downto 0);
    signal buffer_V_local_channel_empty_n : STD_LOGIC;
    signal elem_0_c_full_n : STD_LOGIC;
    signal elem_0_c_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal elem_0_c_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_write_stream_proc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_write_stream_proc_U0_full_n : STD_LOGIC;
    signal start_for_write_stream_proc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_write_stream_proc_U0_empty_n : STD_LOGIC;
    signal write_stream_proc_U0_start_full_n : STD_LOGIC;
    signal write_stream_proc_U0_start_write : STD_LOGIC;

    component read_memory_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        elem_0 : IN STD_LOGIC_VECTOR (9 downto 0);
        j_0 : IN STD_LOGIC_VECTOR (23 downto 0);
        address : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_in_V_AWVALID : OUT STD_LOGIC;
        m_axi_in_V_AWREADY : IN STD_LOGIC;
        m_axi_in_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_in_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_WVALID : OUT STD_LOGIC;
        m_axi_in_V_WREADY : IN STD_LOGIC;
        m_axi_in_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_in_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_in_V_WLAST : OUT STD_LOGIC;
        m_axi_in_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_ARVALID : OUT STD_LOGIC;
        m_axi_in_V_ARREADY : IN STD_LOGIC;
        m_axi_in_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_in_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_in_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_in_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_in_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_RVALID : IN STD_LOGIC;
        m_axi_in_V_RREADY : OUT STD_LOGIC;
        m_axi_in_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_in_V_RLAST : IN STD_LOGIC;
        m_axi_in_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_V_BVALID : IN STD_LOGIC;
        m_axi_in_V_BREADY : OUT STD_LOGIC;
        m_axi_in_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_in_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_in_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        in_V_offset : IN STD_LOGIC_VECTOR (57 downto 0);
        buffer_V_local_channel_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        buffer_V_local_channel_full_n : IN STD_LOGIC;
        buffer_V_local_channel_write : OUT STD_LOGIC;
        elem_0_c_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        elem_0_c_full_n : IN STD_LOGIC;
        elem_0_c_write : OUT STD_LOGIC );
    end component;


    component write_stream_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        elem_0_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        elem_0_empty_n : IN STD_LOGIC;
        elem_0_read : OUT STD_LOGIC;
        elemStream_V_V_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        elemStream_V_V_full_n : IN STD_LOGIC;
        elemStream_V_V_write : OUT STD_LOGIC;
        buffer_V_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        buffer_V_empty_n : IN STD_LOGIC;
        buffer_V_read : OUT STD_LOGIC );
    end component;


    component fifo_w512_d512_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (511 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (511 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w10_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (9 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_write_stream_proc_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    read_memory_proc_U0 : component read_memory_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => read_memory_proc_U0_ap_start,
        start_full_n => start_for_write_stream_proc_U0_full_n,
        ap_done => read_memory_proc_U0_ap_done,
        ap_continue => read_memory_proc_U0_ap_continue,
        ap_idle => read_memory_proc_U0_ap_idle,
        ap_ready => read_memory_proc_U0_ap_ready,
        start_out => read_memory_proc_U0_start_out,
        start_write => read_memory_proc_U0_start_write,
        elem_0 => elem_0,
        j_0 => j_0,
        address => address,
        m_axi_in_V_AWVALID => read_memory_proc_U0_m_axi_in_V_AWVALID,
        m_axi_in_V_AWREADY => ap_const_logic_0,
        m_axi_in_V_AWADDR => read_memory_proc_U0_m_axi_in_V_AWADDR,
        m_axi_in_V_AWID => read_memory_proc_U0_m_axi_in_V_AWID,
        m_axi_in_V_AWLEN => read_memory_proc_U0_m_axi_in_V_AWLEN,
        m_axi_in_V_AWSIZE => read_memory_proc_U0_m_axi_in_V_AWSIZE,
        m_axi_in_V_AWBURST => read_memory_proc_U0_m_axi_in_V_AWBURST,
        m_axi_in_V_AWLOCK => read_memory_proc_U0_m_axi_in_V_AWLOCK,
        m_axi_in_V_AWCACHE => read_memory_proc_U0_m_axi_in_V_AWCACHE,
        m_axi_in_V_AWPROT => read_memory_proc_U0_m_axi_in_V_AWPROT,
        m_axi_in_V_AWQOS => read_memory_proc_U0_m_axi_in_V_AWQOS,
        m_axi_in_V_AWREGION => read_memory_proc_U0_m_axi_in_V_AWREGION,
        m_axi_in_V_AWUSER => read_memory_proc_U0_m_axi_in_V_AWUSER,
        m_axi_in_V_WVALID => read_memory_proc_U0_m_axi_in_V_WVALID,
        m_axi_in_V_WREADY => ap_const_logic_0,
        m_axi_in_V_WDATA => read_memory_proc_U0_m_axi_in_V_WDATA,
        m_axi_in_V_WSTRB => read_memory_proc_U0_m_axi_in_V_WSTRB,
        m_axi_in_V_WLAST => read_memory_proc_U0_m_axi_in_V_WLAST,
        m_axi_in_V_WID => read_memory_proc_U0_m_axi_in_V_WID,
        m_axi_in_V_WUSER => read_memory_proc_U0_m_axi_in_V_WUSER,
        m_axi_in_V_ARVALID => read_memory_proc_U0_m_axi_in_V_ARVALID,
        m_axi_in_V_ARREADY => m_axi_in_V_ARREADY,
        m_axi_in_V_ARADDR => read_memory_proc_U0_m_axi_in_V_ARADDR,
        m_axi_in_V_ARID => read_memory_proc_U0_m_axi_in_V_ARID,
        m_axi_in_V_ARLEN => read_memory_proc_U0_m_axi_in_V_ARLEN,
        m_axi_in_V_ARSIZE => read_memory_proc_U0_m_axi_in_V_ARSIZE,
        m_axi_in_V_ARBURST => read_memory_proc_U0_m_axi_in_V_ARBURST,
        m_axi_in_V_ARLOCK => read_memory_proc_U0_m_axi_in_V_ARLOCK,
        m_axi_in_V_ARCACHE => read_memory_proc_U0_m_axi_in_V_ARCACHE,
        m_axi_in_V_ARPROT => read_memory_proc_U0_m_axi_in_V_ARPROT,
        m_axi_in_V_ARQOS => read_memory_proc_U0_m_axi_in_V_ARQOS,
        m_axi_in_V_ARREGION => read_memory_proc_U0_m_axi_in_V_ARREGION,
        m_axi_in_V_ARUSER => read_memory_proc_U0_m_axi_in_V_ARUSER,
        m_axi_in_V_RVALID => m_axi_in_V_RVALID,
        m_axi_in_V_RREADY => read_memory_proc_U0_m_axi_in_V_RREADY,
        m_axi_in_V_RDATA => m_axi_in_V_RDATA,
        m_axi_in_V_RLAST => m_axi_in_V_RLAST,
        m_axi_in_V_RID => m_axi_in_V_RID,
        m_axi_in_V_RUSER => m_axi_in_V_RUSER,
        m_axi_in_V_RRESP => m_axi_in_V_RRESP,
        m_axi_in_V_BVALID => ap_const_logic_0,
        m_axi_in_V_BREADY => read_memory_proc_U0_m_axi_in_V_BREADY,
        m_axi_in_V_BRESP => ap_const_lv2_0,
        m_axi_in_V_BID => ap_const_lv1_0,
        m_axi_in_V_BUSER => ap_const_lv1_0,
        in_V_offset => in_V_offset,
        buffer_V_local_channel_din => read_memory_proc_U0_buffer_V_local_channel_din,
        buffer_V_local_channel_full_n => buffer_V_local_channel_full_n,
        buffer_V_local_channel_write => read_memory_proc_U0_buffer_V_local_channel_write,
        elem_0_c_din => read_memory_proc_U0_elem_0_c_din,
        elem_0_c_full_n => elem_0_c_full_n,
        elem_0_c_write => read_memory_proc_U0_elem_0_c_write);

    write_stream_proc_U0 : component write_stream_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => write_stream_proc_U0_ap_start,
        ap_done => write_stream_proc_U0_ap_done,
        ap_continue => write_stream_proc_U0_ap_continue,
        ap_idle => write_stream_proc_U0_ap_idle,
        ap_ready => write_stream_proc_U0_ap_ready,
        elem_0_dout => elem_0_c_dout,
        elem_0_empty_n => elem_0_c_empty_n,
        elem_0_read => write_stream_proc_U0_elem_0_read,
        elemStream_V_V_din => write_stream_proc_U0_elemStream_V_V_din,
        elemStream_V_V_full_n => elemStream_V_V_full_n,
        elemStream_V_V_write => write_stream_proc_U0_elemStream_V_V_write,
        buffer_V_dout => buffer_V_local_channel_dout,
        buffer_V_empty_n => buffer_V_local_channel_empty_n,
        buffer_V_read => write_stream_proc_U0_buffer_V_read);

    buffer_V_local_channel_U : component fifo_w512_d512_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_memory_proc_U0_buffer_V_local_channel_din,
        if_full_n => buffer_V_local_channel_full_n,
        if_write => read_memory_proc_U0_buffer_V_local_channel_write,
        if_dout => buffer_V_local_channel_dout,
        if_empty_n => buffer_V_local_channel_empty_n,
        if_read => write_stream_proc_U0_buffer_V_read);

    elem_0_c_U : component fifo_w10_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_memory_proc_U0_elem_0_c_din,
        if_full_n => elem_0_c_full_n,
        if_write => read_memory_proc_U0_elem_0_c_write,
        if_dout => elem_0_c_dout,
        if_empty_n => elem_0_c_empty_n,
        if_read => write_stream_proc_U0_elem_0_read);

    start_for_write_stream_proc_U0_U : component start_for_write_stream_proc_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_write_stream_proc_U0_din,
        if_full_n => start_for_write_stream_proc_U0_full_n,
        if_write => read_memory_proc_U0_start_write,
        if_dout => start_for_write_stream_proc_U0_dout,
        if_empty_n => start_for_write_stream_proc_U0_empty_n,
        if_read => write_stream_proc_U0_ap_ready);




    ap_done <= write_stream_proc_U0_ap_done;
    ap_idle <= (write_stream_proc_U0_ap_idle and read_memory_proc_U0_ap_idle);
    ap_ready <= read_memory_proc_U0_ap_ready;
    ap_sync_continue <= ap_continue;
    ap_sync_done <= write_stream_proc_U0_ap_done;
    ap_sync_ready <= read_memory_proc_U0_ap_ready;
    elemStream_V_V_din <= write_stream_proc_U0_elemStream_V_V_din;
    elemStream_V_V_write <= write_stream_proc_U0_elemStream_V_V_write;
    m_axi_in_V_ARADDR <= read_memory_proc_U0_m_axi_in_V_ARADDR;
    m_axi_in_V_ARBURST <= read_memory_proc_U0_m_axi_in_V_ARBURST;
    m_axi_in_V_ARCACHE <= read_memory_proc_U0_m_axi_in_V_ARCACHE;
    m_axi_in_V_ARID <= read_memory_proc_U0_m_axi_in_V_ARID;
    m_axi_in_V_ARLEN <= read_memory_proc_U0_m_axi_in_V_ARLEN;
    m_axi_in_V_ARLOCK <= read_memory_proc_U0_m_axi_in_V_ARLOCK;
    m_axi_in_V_ARPROT <= read_memory_proc_U0_m_axi_in_V_ARPROT;
    m_axi_in_V_ARQOS <= read_memory_proc_U0_m_axi_in_V_ARQOS;
    m_axi_in_V_ARREGION <= read_memory_proc_U0_m_axi_in_V_ARREGION;
    m_axi_in_V_ARSIZE <= read_memory_proc_U0_m_axi_in_V_ARSIZE;
    m_axi_in_V_ARUSER <= read_memory_proc_U0_m_axi_in_V_ARUSER;
    m_axi_in_V_ARVALID <= read_memory_proc_U0_m_axi_in_V_ARVALID;
    m_axi_in_V_AWADDR <= ap_const_lv64_0;
    m_axi_in_V_AWBURST <= ap_const_lv2_0;
    m_axi_in_V_AWCACHE <= ap_const_lv4_0;
    m_axi_in_V_AWID <= ap_const_lv1_0;
    m_axi_in_V_AWLEN <= ap_const_lv32_0;
    m_axi_in_V_AWLOCK <= ap_const_lv2_0;
    m_axi_in_V_AWPROT <= ap_const_lv3_0;
    m_axi_in_V_AWQOS <= ap_const_lv4_0;
    m_axi_in_V_AWREGION <= ap_const_lv4_0;
    m_axi_in_V_AWSIZE <= ap_const_lv3_0;
    m_axi_in_V_AWUSER <= ap_const_lv1_0;
    m_axi_in_V_AWVALID <= ap_const_logic_0;
    m_axi_in_V_BREADY <= ap_const_logic_0;
    m_axi_in_V_RREADY <= read_memory_proc_U0_m_axi_in_V_RREADY;
    m_axi_in_V_WDATA <= ap_const_lv512_lc_1;
    m_axi_in_V_WID <= ap_const_lv1_0;
    m_axi_in_V_WLAST <= ap_const_logic_0;
    m_axi_in_V_WSTRB <= ap_const_lv64_0;
    m_axi_in_V_WUSER <= ap_const_lv1_0;
    m_axi_in_V_WVALID <= ap_const_logic_0;
    read_memory_proc_U0_ap_continue <= ap_const_logic_1;
    read_memory_proc_U0_ap_start <= ap_start;
    start_for_write_stream_proc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    write_stream_proc_U0_ap_continue <= ap_continue;
    write_stream_proc_U0_ap_start <= start_for_write_stream_proc_U0_empty_n;
    write_stream_proc_U0_start_full_n <= ap_const_logic_1;
    write_stream_proc_U0_start_write <= ap_const_logic_0;
end behav;
